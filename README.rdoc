== time_tracker_service

This is basic a web service built on Rails, intended to illustrate step-by-step how to create
and deploy a marginally useful simple web service from scratch.  It provides a
REST service for keeping track of your hours.  A user can create, read, update, and
delete records that contain the following data:
* Project Name
* Task Name
* Date on which the task was performed
* Time (in hours) spent performing task
* Notes

There are also admin privileges baked in - an admin can create, read, update, and delete users.


== Features
* REST API's (Create, Read, Update, Delete via HTTPS)
* JSON format
* Solid MVC architecture
* Secure (Basic-Auth over HTTPS, encrypted passwords stored in database)
* Multi-user, admin privileges
* web interface to create, read, update, and delete users and tasks

== Limitations
* No sign-up (new users must be added by admin)
* Very basic web pages (no CSS styling, no pages for summaries, charts, etc)
* No tests

== Requirements
* Ruby 1.9.2 (RVM works well: https://rvm.io/)
* Rails 3.2.3 (gem install rails)
* Optionally a local database (Postgres OS X install can be found at http://www.postgresql.org/download/macosx/).

== Steps
1. Create a new Rails project using Postgres for the database.  Postgres is chosen because we'll deploy on Heroku (http://www.heroku.com/) which offers a free 5MB shared Postgres database.
    rails new time_tracker_service -d postgresql

2. Add the bcrypt gem, which will allow us to store encrypted passwords in the database Gemfile
    gem 'bcrypt-ruby'

3. Install the bundle with new Gem:
    bundle install

4. Create the User scaffolding, which generates the model, controller, and views for a user
    rails generate scaffold User name:string email:string password_digest:string admin:boolean --no-test-framework

5. Create the Task scaffolding, which generates the model, controller, and views for a task
    rails generate scaffold Task project_name:string task_name:string performed_on:date hours:float notes:text user:references  --no-test-framework

6. Modify the User model to make 1-to-many mapping to tasks, as well as adding secure password support:
app/models/user.rb:
  class User < ActiveRecord::Base
    has_secure_password
    has_many :tasks
  end

7. Recreate database:
  bundle exec rake db:reset
  bundle exec rake db:create
  bundle exec rake db:migrate

8. Modify the users_controller.rb and tasks_controller.rb to perform authentication prior to routing a request:
  before_filter :authenticate
